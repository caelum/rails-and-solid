# What is this?

This is a gem that changes Rails behavior to allow you to code more freely, without coupling
yourself to inheritance issues. Take a look at the examples to see what it changes.

# Installing

Configure the gem in your Gemfile:

  gem 'rails-and-solid'

# Configuring

In order not to refactor Rails completely, the easiest solution is to just trick it
and make it believe you have the controller he wants, just trick him:

  class ApplicationController < ActionController::Base
    
    protect_from_forgery
    include RailsAndSolid::TrickHim
  
  end

# Using

NO INHERITANCE

GIVE A SIMPLE EXAMPLE

GIVE A LOAD EXAMPLE

GIVE AN AMAZING EXAMPLE

# Helpers

# Handlers

# TODO

Help? Ok, simple unit tests. Units are split and behavior is composed. This was only to
show that its possible to achieve the same (and better results) with less coupling and a different
OO design approach. So what about start unit testing, providing new handlers, new helpers or
just doing a blog post on it? Refactoring trick_him would also be nice.

# Why not changing Rails internally?

One needs to know how all the mixin of Rails interact with each other (i.e. the 36 ancestors
of ActionController) in order to make safe changes. That is the coupling this proof of concept
is trying show how to avoid.